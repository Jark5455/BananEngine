name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    env:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++

    steps:
    
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      run: |
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
        sudo apt update
        sudo apt install vulkan-sdk libglm-dev clang

        pip install conan

    - name: Conan Generate Profile
      run: conan profile detect --force

    - name: Conan Install Libraries Debug
      run: conan install . --output-folder=${{github.workspace}}/build-linux/build-debug --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True --settings=build_type=Debug --settings=compiler.cppstd=20

    - name: Configure CMake Build Debug
      run: cmake -B ${{github.workspace}}/build-linux/build-debug -DCMAKE_BUILD_TYPE=Debug
      
    - name: Compile BananEngine Build Debug
      run: cmake --build ${{github.workspace}}/build-linux/build-debug

    - name: Conan Install Libraries Release
      run: conan install . --output-folder=${{github.workspace}}/build-linux/build-release -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True --build=missing --settings=compiler.cppstd=20
      
    - name: Configure CMake Build Release
      run: cmake -B ${{github.workspace}}/build-linux/build-release -DCMAKE_BUILD_TYPE=Release
      
    - name: Compile BananEngine Build Debug
      run: cmake --build ${{github.workspace}}/build-linux/build-release
      
    - name: Archive compilation output
      uses: actions/upload-artifact@v3
      with:
        name: Build Output Linux
        path: ${{github.workspace}}/build-linux/
      
  build-windows:
    runs-on: windows-latest

    steps:
    
      - uses: actions/checkout@v3
        with:
          submodules: recursive
    
      - name: Install Dependencies
        run: |
          Invoke-Webrequest -URI https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe -OutFile ${{github.workspace}}\vulkan-sdk.exe
          ${{github.workspace}}\vulkan-sdk.exe --accept-licenses --default-answer --confirm-command install com.lunarg.vulkan.32bit com.lunarg.vulkan.sdl2 com.lunarg.vulkan.glm com.lunarg.vulkan.volk com.lunarg.vulkan.vma com.lunarg.vulkan.debug com.lunarg.vulkan.debug32
          
          $var = Invoke-Webrequest -URI https://vulkan.lunarg.com/sdk/latest/windows.txt | Select-Object -ExpandProperty Content
          $env:VULKAN_SDK = "C:\VulkanSDK\$var\"

          pip install conan

      - name: Conan Generate Profile
        run: conan profile detect --force

      - name: Conan Install Libraries Debug
        run: conan install . --output-folder=${{github.workspace}}/build-windows/build-debug --build=missing --settings=build_type=Debug --settings=compiler.cppstd=20
      
      - name: Configure CMake Build Debug
        run: |
          $var = Invoke-Webrequest -URI https://vulkan.lunarg.com/sdk/latest/windows.txt | Select-Object -ExpandProperty Content
          $env:VULKAN_SDK = "C:\VulkanSDK\$var\"
          
          cmake -B ${{github.workspace}}/build-windows/build-debug -T ClangCL

      - name: Compile BananEngine Build Debug
        run: cmake --build ${{github.workspace}}/build-windows/build-debug --config Debug

      - name: Conan Install Libraries Release
        run: conan install . --output-folder=${{github.workspace}}/build-windows/build-release --build=missing --settings=compiler.cppstd=20
        
      - name: Configure CMake Build Release
        run: |
          $var = Invoke-Webrequest -URI https://vulkan.lunarg.com/sdk/latest/windows.txt | Select-Object -ExpandProperty Content
          $env:VULKAN_SDK = "C:\VulkanSDK\$var\"
          
          cmake -B ${{github.workspace}}/build-windows/build-release -T ClangCL

        
      - name: Compile BananEngine Build Release
        run: cmake --build ${{github.workspace}}/build-windows/build-release --config Release
        
      - name: Archive compilation output
        uses: actions/upload-artifact@v3
        with:
          name: Build Output Windows
          path: ${{github.workspace}}/build-windows/
          
        
        
