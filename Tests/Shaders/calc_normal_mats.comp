#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference : require

layout (local_size_x = 256) in;

struct GameObject {
    vec4 position;
    vec4 rotation; // color for point lights
    vec4 scale; // radius for point lights

    mat4 modelMatrix;
    mat4 normalMatrix;

    int hasTexture;
    int hasNormal;

    int hasHeight;
    float heightscale;
    float parallaxBias;
    float numLayers;
    int parallaxmode;

    int isPointLight;
};

layout(set = 0, binding = 0) uniform GlobalUbo {
    mat4 projection;
    mat4 inverseProjection;
    mat4 view;
    mat4 inverseView;
    vec4 ambientLightColor;
    int numGameObjects;
    int numPointLights;
} ubo;

layout(set = 0, binding = 1) buffer GameObjects {
    GameObject objects[];
} ssbo;

void main()
{
    for (int i = 0; i < ubo.numGameObjects; i++) {

        if (ssbo.objects[i].isPointLight == 1)
            continue;

        const float c3 = cos(ssbo.objects[i].rotation.b);
        const float s3 = sin(ssbo.objects[i].rotation.b);
        const float c2 = cos(ssbo.objects[i].rotation.r);
        const float s2 = sin(ssbo.objects[i].rotation.r);
        const float c1 = cos(ssbo.objects[i].rotation.g);
        const float s1 = sin(ssbo.objects[i].rotation.g);

        const vec3 invScale = 1 / ssbo.objects[i].scale.xyz;

        ssbo.objects[i].modelMatrix[0][0] = ssbo.objects[i].scale.r * (c1 * c3 + s1 * s2 * s3);
        ssbo.objects[i].modelMatrix[0][1] = ssbo.objects[i].scale.r * (c2 * s3);
        ssbo.objects[i].modelMatrix[0][2] = ssbo.objects[i].scale.r * (c1 * s2 * s3 - c3 * s1);
        ssbo.objects[i].modelMatrix[0][3] = 0;

        ssbo.objects[i].modelMatrix[1][0] = ssbo.objects[i].scale.g * (c3 * s1 * s2 - c1 * s3);
        ssbo.objects[i].modelMatrix[1][1] = ssbo.objects[i].scale.g * (c2 * c3);
        ssbo.objects[i].modelMatrix[1][2] = ssbo.objects[i].scale.g * (c1 * c3 * s2 + s1 * s3);
        ssbo.objects[i].modelMatrix[1][3] = 0;

        ssbo.objects[i].modelMatrix[2][0] = ssbo.objects[i].scale.b * (c2 * s1);
        ssbo.objects[i].modelMatrix[2][1] = ssbo.objects[i].scale.b * (-s2);
        ssbo.objects[i].modelMatrix[2][2] = ssbo.objects[i].scale.b * (c1 * c2);
        ssbo.objects[i].modelMatrix[2][3] = 0;

        ssbo.objects[i].modelMatrix[3][0] = ssbo.objects[i].position.r;
        ssbo.objects[i].modelMatrix[3][1] = ssbo.objects[i].position.g;
        ssbo.objects[i].modelMatrix[3][2] = ssbo.objects[i].position.b;
        ssbo.objects[i].modelMatrix[3][3] = 1;

        ssbo.objects[i].normalMatrix[0][0] = invScale.x * (c1 * c3 + s1 * s2 * s3);
        ssbo.objects[i].normalMatrix[0][1] = invScale.x * (c2 * s3);
        ssbo.objects[i].normalMatrix[0][2] = invScale.x * (c1 * s2 * s3 - c3 * s1);
        ssbo.objects[i].normalMatrix[0][3] = 0;

        ssbo.objects[i].normalMatrix[1][0] = invScale.y * (c3 * s1 * s2 - c1 * s3);
        ssbo.objects[i].normalMatrix[1][1] = invScale.y * (c2 * c3);
        ssbo.objects[i].normalMatrix[1][2] = invScale.y * (c1 * c3 * s2 + s1 * s3);
        ssbo.objects[i].normalMatrix[1][3] = 0;

        ssbo.objects[i].normalMatrix[2][0] = invScale.z * (c2 * s1);
        ssbo.objects[i].normalMatrix[2][1] = invScale.z * (-s2);
        ssbo.objects[i].normalMatrix[2][2] = invScale.z * (c1 * c2);
        ssbo.objects[i].normalMatrix[2][3] = 0;

        ssbo.objects[i].normalMatrix[3][0] = 0;
        ssbo.objects[i].normalMatrix[3][1] = 0;
        ssbo.objects[i].normalMatrix[3][2] = 0;
        ssbo.objects[i].normalMatrix[3][3] = 0;
    }
}